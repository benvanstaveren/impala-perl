#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use Impala::Protocol::Beeswax::Types;

# HELPER FUNCTIONS AND STRUCTURES

package
	Impala::Protocol::Beeswax::BeeswaxService_query_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_query_args->mk_accessors( qw( query ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{query} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{query}) {
      $self->{query} = $vals->{query};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_query_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{query} = new Impala::Protocol::Beeswax::Query();
        $xfer += $self->{query}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_query_args');
  if (defined $self->{query}) {
    $xfer += $output->writeFieldBegin('query', TType::STRUCT, 1);
    $xfer += $self->{query}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_query_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_query_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_query_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Beeswax::QueryHandle();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::BeeswaxException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_query_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_executeAndWait_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_executeAndWait_args->mk_accessors( qw( query clientCtx ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{query} = undef;
  $self->{clientCtx} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{query}) {
      $self->{query} = $vals->{query};
    }
    if (defined $vals->{clientCtx}) {
      $self->{clientCtx} = $vals->{clientCtx};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_executeAndWait_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{query} = new Impala::Protocol::Beeswax::Query();
        $xfer += $self->{query}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{clientCtx});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_executeAndWait_args');
  if (defined $self->{query}) {
    $xfer += $output->writeFieldBegin('query', TType::STRUCT, 1);
    $xfer += $self->{query}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{clientCtx}) {
    $xfer += $output->writeFieldBegin('clientCtx', TType::STRING, 2);
    $xfer += $output->writeString($self->{clientCtx});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_executeAndWait_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_executeAndWait_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_executeAndWait_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Beeswax::QueryHandle();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::BeeswaxException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_executeAndWait_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_explain_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_explain_args->mk_accessors( qw( query ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{query} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{query}) {
      $self->{query} = $vals->{query};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_explain_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{query} = new Impala::Protocol::Beeswax::Query();
        $xfer += $self->{query}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_explain_args');
  if (defined $self->{query}) {
    $xfer += $output->writeFieldBegin('query', TType::STRUCT, 1);
    $xfer += $self->{query}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_explain_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_explain_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_explain_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Beeswax::QueryExplanation();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::BeeswaxException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_explain_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_fetch_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_fetch_args->mk_accessors( qw( query_id start_over fetch_size ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{query_id} = undef;
  $self->{start_over} = undef;
  $self->{fetch_size} = -1;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{query_id}) {
      $self->{query_id} = $vals->{query_id};
    }
    if (defined $vals->{start_over}) {
      $self->{start_over} = $vals->{start_over};
    }
    if (defined $vals->{fetch_size}) {
      $self->{fetch_size} = $vals->{fetch_size};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_fetch_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{query_id} = new Impala::Protocol::Beeswax::QueryHandle();
        $xfer += $self->{query_id}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{start_over});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{fetch_size});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_fetch_args');
  if (defined $self->{query_id}) {
    $xfer += $output->writeFieldBegin('query_id', TType::STRUCT, 1);
    $xfer += $self->{query_id}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{start_over}) {
    $xfer += $output->writeFieldBegin('start_over', TType::BOOL, 2);
    $xfer += $output->writeBool($self->{start_over});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fetch_size}) {
    $xfer += $output->writeFieldBegin('fetch_size', TType::I32, 3);
    $xfer += $output->writeI32($self->{fetch_size});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_fetch_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_fetch_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  $self->{error2} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{error2}) {
      $self->{error2} = $vals->{error2};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_fetch_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Beeswax::Results();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::QueryNotFoundException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error2} = new Impala::Protocol::Beeswax::BeeswaxException();
        $xfer += $self->{error2}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_fetch_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error2}) {
    $xfer += $output->writeFieldBegin('error2', TType::STRUCT, 2);
    $xfer += $self->{error2}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_get_state_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_get_state_args->mk_accessors( qw( handle ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{handle} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{handle}) {
      $self->{handle} = $vals->{handle};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_get_state_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{handle} = new Impala::Protocol::Beeswax::QueryHandle();
        $xfer += $self->{handle}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_get_state_args');
  if (defined $self->{handle}) {
    $xfer += $output->writeFieldBegin('handle', TType::STRUCT, 1);
    $xfer += $self->{handle}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_get_state_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_get_state_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_get_state_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::QueryNotFoundException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_get_state_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I32, 0);
    $xfer += $output->writeI32($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_get_results_metadata_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_get_results_metadata_args->mk_accessors( qw( handle ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{handle} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{handle}) {
      $self->{handle} = $vals->{handle};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_get_results_metadata_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{handle} = new Impala::Protocol::Beeswax::QueryHandle();
        $xfer += $self->{handle}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_get_results_metadata_args');
  if (defined $self->{handle}) {
    $xfer += $output->writeFieldBegin('handle', TType::STRUCT, 1);
    $xfer += $self->{handle}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_get_results_metadata_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_get_results_metadata_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_get_results_metadata_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Beeswax::ResultsMetadata();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::QueryNotFoundException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_get_results_metadata_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_echo_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_echo_args->mk_accessors( qw( s ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{s} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{s}) {
      $self->{s} = $vals->{s};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_echo_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{s});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_echo_args');
  if (defined $self->{s}) {
    $xfer += $output->writeFieldBegin('s', TType::STRING, 1);
    $xfer += $output->writeString($self->{s});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_echo_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_echo_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_echo_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_echo_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_dump_config_args;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_dump_config_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_dump_config_args');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_dump_config_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_dump_config_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_dump_config_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_dump_config_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_get_log_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_get_log_args->mk_accessors( qw( context ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{context} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{context}) {
      $self->{context} = $vals->{context};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_get_log_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{context});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_get_log_args');
  if (defined $self->{context}) {
    $xfer += $output->writeFieldBegin('context', TType::STRING, 1);
    $xfer += $output->writeString($self->{context});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_get_log_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_get_log_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_get_log_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::QueryNotFoundException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_get_log_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_get_default_configuration_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_get_default_configuration_args->mk_accessors( qw( include_hadoop ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{include_hadoop} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{include_hadoop}) {
      $self->{include_hadoop} = $vals->{include_hadoop};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_get_default_configuration_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{include_hadoop});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_get_default_configuration_args');
  if (defined $self->{include_hadoop}) {
    $xfer += $output->writeFieldBegin('include_hadoop', TType::BOOL, 1);
    $xfer += $output->writeBool($self->{include_hadoop});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_get_default_configuration_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_get_default_configuration_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_get_default_configuration_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size21 = 0;
          $self->{success} = [];
          my $_etype24 = 0;
          $xfer += $input->readListBegin(\$_etype24, \$_size21);
          for (my $_i25 = 0; $_i25 < $_size21; ++$_i25)
          {
            my $elem26 = undef;
            $elem26 = new Impala::Protocol::Beeswax::ConfigVariable();
            $xfer += $elem26->read($input);
            push(@{$self->{success}},$elem26);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_get_default_configuration_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter27 (@{$self->{success}}) 
        {
          $xfer += ${iter27}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_close_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_close_args->mk_accessors( qw( handle ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{handle} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{handle}) {
      $self->{handle} = $vals->{handle};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_close_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{handle} = new Impala::Protocol::Beeswax::QueryHandle();
        $xfer += $self->{handle}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_close_args');
  if (defined $self->{handle}) {
    $xfer += $output->writeFieldBegin('handle', TType::STRUCT, 1);
    $xfer += $self->{handle}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_close_result;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_close_result->mk_accessors( qw( ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{error} = undef;
  $self->{error2} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{error2}) {
      $self->{error2} = $vals->{error2};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_close_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::QueryNotFoundException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error2} = new Impala::Protocol::Beeswax::BeeswaxException();
        $xfer += $self->{error2}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_close_result');
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error2}) {
    $xfer += $output->writeFieldBegin('error2', TType::STRUCT, 2);
    $xfer += $self->{error2}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_clean_args;
use base qw(Class::Accessor);
Impala::Protocol::Beeswax::BeeswaxService_clean_args->mk_accessors( qw( log_context ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{log_context} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{log_context}) {
      $self->{log_context} = $vals->{log_context};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_clean_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{log_context});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_clean_args');
  if (defined $self->{log_context}) {
    $xfer += $output->writeFieldBegin('log_context', TType::STRING, 1);
    $xfer += $output->writeString($self->{log_context});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxService_clean_result;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'BeeswaxService_clean_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('BeeswaxService_clean_result');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Beeswax::BeeswaxServiceIf;

use strict;


sub query{
  my $self = shift;
  my $query = shift;

  die 'implement interface';
}

sub executeAndWait{
  my $self = shift;
  my $query = shift;
  my $clientCtx = shift;

  die 'implement interface';
}

sub explain{
  my $self = shift;
  my $query = shift;

  die 'implement interface';
}

sub fetch{
  my $self = shift;
  my $query_id = shift;
  my $start_over = shift;
  my $fetch_size = shift;

  die 'implement interface';
}

sub get_state{
  my $self = shift;
  my $handle = shift;

  die 'implement interface';
}

sub get_results_metadata{
  my $self = shift;
  my $handle = shift;

  die 'implement interface';
}

sub echo{
  my $self = shift;
  my $s = shift;

  die 'implement interface';
}

sub dump_config{
  my $self = shift;

  die 'implement interface';
}

sub get_log{
  my $self = shift;
  my $context = shift;

  die 'implement interface';
}

sub get_default_configuration{
  my $self = shift;
  my $include_hadoop = shift;

  die 'implement interface';
}

sub close{
  my $self = shift;
  my $handle = shift;

  die 'implement interface';
}

sub clean{
  my $self = shift;
  my $log_context = shift;

  die 'implement interface';
}

package
	Impala::Protocol::Beeswax::BeeswaxServiceRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub query{
  my ($self, $request) = @_;

  my $query = ($request->{'query'}) ? $request->{'query'} : undef;
  return $self->{impl}->query($query);
}

sub executeAndWait{
  my ($self, $request) = @_;

  my $query = ($request->{'query'}) ? $request->{'query'} : undef;
  my $clientCtx = ($request->{'clientCtx'}) ? $request->{'clientCtx'} : undef;
  return $self->{impl}->executeAndWait($query, $clientCtx);
}

sub explain{
  my ($self, $request) = @_;

  my $query = ($request->{'query'}) ? $request->{'query'} : undef;
  return $self->{impl}->explain($query);
}

sub fetch{
  my ($self, $request) = @_;

  my $query_id = ($request->{'query_id'}) ? $request->{'query_id'} : undef;
  my $start_over = ($request->{'start_over'}) ? $request->{'start_over'} : undef;
  my $fetch_size = ($request->{'fetch_size'}) ? $request->{'fetch_size'} : undef;
  return $self->{impl}->fetch($query_id, $start_over, $fetch_size);
}

sub get_state{
  my ($self, $request) = @_;

  my $handle = ($request->{'handle'}) ? $request->{'handle'} : undef;
  return $self->{impl}->get_state($handle);
}

sub get_results_metadata{
  my ($self, $request) = @_;

  my $handle = ($request->{'handle'}) ? $request->{'handle'} : undef;
  return $self->{impl}->get_results_metadata($handle);
}

sub echo{
  my ($self, $request) = @_;

  my $s = ($request->{'s'}) ? $request->{'s'} : undef;
  return $self->{impl}->echo($s);
}

sub dump_config{
  my ($self, $request) = @_;

  return $self->{impl}->dump_config();
}

sub get_log{
  my ($self, $request) = @_;

  my $context = ($request->{'context'}) ? $request->{'context'} : undef;
  return $self->{impl}->get_log($context);
}

sub get_default_configuration{
  my ($self, $request) = @_;

  my $include_hadoop = ($request->{'include_hadoop'}) ? $request->{'include_hadoop'} : undef;
  return $self->{impl}->get_default_configuration($include_hadoop);
}

sub close{
  my ($self, $request) = @_;

  my $handle = ($request->{'handle'}) ? $request->{'handle'} : undef;
  return $self->{impl}->close($handle);
}

sub clean{
  my ($self, $request) = @_;

  my $log_context = ($request->{'log_context'}) ? $request->{'log_context'} : undef;
  return $self->{impl}->clean($log_context);
}

package
	Impala::Protocol::Beeswax::BeeswaxServiceClient;


use base qw(Impala::Protocol::Beeswax::BeeswaxServiceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub query{
  my $self = shift;
  my $query = shift;

    $self->send_query($query);
  return $self->recv_query();
}

sub send_query{
  my $self = shift;
  my $query = shift;

  $self->{output}->writeMessageBegin('query', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_query_args();
  $args->{query} = $query;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_query{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_query_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "query failed: unknown result";
}
sub executeAndWait{
  my $self = shift;
  my $query = shift;
  my $clientCtx = shift;

    $self->send_executeAndWait($query, $clientCtx);
  return $self->recv_executeAndWait();
}

sub send_executeAndWait{
  my $self = shift;
  my $query = shift;
  my $clientCtx = shift;

  $self->{output}->writeMessageBegin('executeAndWait', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_executeAndWait_args();
  $args->{query} = $query;
  $args->{clientCtx} = $clientCtx;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executeAndWait{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_executeAndWait_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executeAndWait failed: unknown result";
}
sub explain{
  my $self = shift;
  my $query = shift;

    $self->send_explain($query);
  return $self->recv_explain();
}

sub send_explain{
  my $self = shift;
  my $query = shift;

  $self->{output}->writeMessageBegin('explain', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_explain_args();
  $args->{query} = $query;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_explain{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_explain_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "explain failed: unknown result";
}
sub fetch{
  my $self = shift;
  my $query_id = shift;
  my $start_over = shift;
  my $fetch_size = shift;

    $self->send_fetch($query_id, $start_over, $fetch_size);
  return $self->recv_fetch();
}

sub send_fetch{
  my $self = shift;
  my $query_id = shift;
  my $start_over = shift;
  my $fetch_size = shift;

  $self->{output}->writeMessageBegin('fetch', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_fetch_args();
  $args->{query_id} = $query_id;
  $args->{start_over} = $start_over;
  $args->{fetch_size} = $fetch_size;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_fetch{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_fetch_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  if (defined $result->{error2}) {
    die $result->{error2};
  }
  die "fetch failed: unknown result";
}
sub get_state{
  my $self = shift;
  my $handle = shift;

    $self->send_get_state($handle);
  return $self->recv_get_state();
}

sub send_get_state{
  my $self = shift;
  my $handle = shift;

  $self->{output}->writeMessageBegin('get_state', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_get_state_args();
  $args->{handle} = $handle;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_state{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_get_state_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "get_state failed: unknown result";
}
sub get_results_metadata{
  my $self = shift;
  my $handle = shift;

    $self->send_get_results_metadata($handle);
  return $self->recv_get_results_metadata();
}

sub send_get_results_metadata{
  my $self = shift;
  my $handle = shift;

  $self->{output}->writeMessageBegin('get_results_metadata', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_get_results_metadata_args();
  $args->{handle} = $handle;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_results_metadata{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_get_results_metadata_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "get_results_metadata failed: unknown result";
}
sub echo{
  my $self = shift;
  my $s = shift;

    $self->send_echo($s);
  return $self->recv_echo();
}

sub send_echo{
  my $self = shift;
  my $s = shift;

  $self->{output}->writeMessageBegin('echo', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_echo_args();
  $args->{s} = $s;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_echo{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_echo_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "echo failed: unknown result";
}
sub dump_config{
  my $self = shift;

    $self->send_dump_config();
  return $self->recv_dump_config();
}

sub send_dump_config{
  my $self = shift;

  $self->{output}->writeMessageBegin('dump_config', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_dump_config_args();
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_dump_config{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_dump_config_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "dump_config failed: unknown result";
}
sub get_log{
  my $self = shift;
  my $context = shift;

    $self->send_get_log($context);
  return $self->recv_get_log();
}

sub send_get_log{
  my $self = shift;
  my $context = shift;

  $self->{output}->writeMessageBegin('get_log', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_get_log_args();
  $args->{context} = $context;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_log{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_get_log_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "get_log failed: unknown result";
}
sub get_default_configuration{
  my $self = shift;
  my $include_hadoop = shift;

    $self->send_get_default_configuration($include_hadoop);
  return $self->recv_get_default_configuration();
}

sub send_get_default_configuration{
  my $self = shift;
  my $include_hadoop = shift;

  $self->{output}->writeMessageBegin('get_default_configuration', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_get_default_configuration_args();
  $args->{include_hadoop} = $include_hadoop;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_default_configuration{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_get_default_configuration_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "get_default_configuration failed: unknown result";
}
sub close{
  my $self = shift;
  my $handle = shift;

    $self->send_close($handle);
  $self->recv_close();
}

sub send_close{
  my $self = shift;
  my $handle = shift;

  $self->{output}->writeMessageBegin('close', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_close_args();
  $args->{handle} = $handle;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_close{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_close_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{error}) {
    die $result->{error};
  }
  if (defined $result->{error2}) {
    die $result->{error2};
  }
  return;
}
sub clean{
  my $self = shift;
  my $log_context = shift;

    $self->send_clean($log_context);
  $self->recv_clean();
}

sub send_clean{
  my $self = shift;
  my $log_context = shift;

  $self->{output}->writeMessageBegin('clean', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Beeswax::BeeswaxService_clean_args();
  $args->{log_context} = $log_context;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_clean{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Beeswax::BeeswaxService_clean_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  return;
}
package
	Impala::Protocol::Beeswax::BeeswaxServiceProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_query {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_query_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_query_result();
    eval {
      $result->{success} = $self->{handler}->query($args->query);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::BeeswaxException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('query', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executeAndWait {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_executeAndWait_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_executeAndWait_result();
    eval {
      $result->{success} = $self->{handler}->executeAndWait($args->query, $args->clientCtx);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::BeeswaxException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executeAndWait', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_explain {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_explain_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_explain_result();
    eval {
      $result->{success} = $self->{handler}->explain($args->query);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::BeeswaxException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('explain', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_fetch {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_fetch_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_fetch_result();
    eval {
      $result->{success} = $self->{handler}->fetch($args->query_id, $args->start_over, $args->fetch_size);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::QueryNotFoundException') ){ 
      $result->{error} = $@;
        }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::BeeswaxException') ){ 
      $result->{error2} = $@;
    }
    $output->writeMessageBegin('fetch', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_state {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_get_state_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_get_state_result();
    eval {
      $result->{success} = $self->{handler}->get_state($args->handle);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::QueryNotFoundException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('get_state', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_results_metadata {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_get_results_metadata_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_get_results_metadata_result();
    eval {
      $result->{success} = $self->{handler}->get_results_metadata($args->handle);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::QueryNotFoundException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('get_results_metadata', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_echo {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_echo_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_echo_result();
    $result->{success} = $self->{handler}->echo($args->s);
    $output->writeMessageBegin('echo', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_dump_config {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_dump_config_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_dump_config_result();
    $result->{success} = $self->{handler}->dump_config();
    $output->writeMessageBegin('dump_config', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_log {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_get_log_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_get_log_result();
    eval {
      $result->{success} = $self->{handler}->get_log($args->context);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::QueryNotFoundException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('get_log', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_default_configuration {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_get_default_configuration_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_get_default_configuration_result();
    $result->{success} = $self->{handler}->get_default_configuration($args->include_hadoop);
    $output->writeMessageBegin('get_default_configuration', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_close {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_close_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_close_result();
    eval {
      $self->{handler}->close($args->handle);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::QueryNotFoundException') ){ 
      $result->{error} = $@;
        }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::BeeswaxException') ){ 
      $result->{error2} = $@;
    }
    $output->writeMessageBegin('close', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_clean {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Beeswax::BeeswaxService_clean_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Beeswax::BeeswaxService_clean_result();
    $self->{handler}->clean($args->log_context);
    $output->writeMessageBegin('clean', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
