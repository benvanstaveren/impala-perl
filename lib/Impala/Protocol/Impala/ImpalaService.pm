#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use Impala::Protocol::Impala::Types;
use Impala::Protocol::Beeswax::BeeswaxService;

# HELPER FUNCTIONS AND STRUCTURES

package
	Impala::Protocol::Impala::ImpalaService_Cancel_args;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_Cancel_args->mk_accessors( qw( query_id ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{query_id} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{query_id}) {
      $self->{query_id} = $vals->{query_id};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_Cancel_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{query_id} = new Impala::Protocol::Beeswax::QueryHandle();
        $xfer += $self->{query_id}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_Cancel_args');
  if (defined $self->{query_id}) {
    $xfer += $output->writeFieldBegin('query_id', TType::STRUCT, 1);
    $xfer += $self->{query_id}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_Cancel_result;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_Cancel_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_Cancel_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Status::TStatus();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::BeeswaxException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_Cancel_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_ResetCatalog_args;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_ResetCatalog_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_ResetCatalog_args');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_ResetCatalog_result;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_ResetCatalog_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_ResetCatalog_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Status::TStatus();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_ResetCatalog_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_ResetTable_args;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_ResetTable_args->mk_accessors( qw( request ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{request} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{request}) {
      $self->{request} = $vals->{request};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_ResetTable_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{request} = new Impala::Protocol::Impala::TResetTableReq();
        $xfer += $self->{request}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_ResetTable_args');
  if (defined $self->{request}) {
    $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
    $xfer += $self->{request}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_ResetTable_result;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_ResetTable_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_ResetTable_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Status::TStatus();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_ResetTable_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_GetRuntimeProfile_args;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_GetRuntimeProfile_args->mk_accessors( qw( query_id ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{query_id} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{query_id}) {
      $self->{query_id} = $vals->{query_id};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_GetRuntimeProfile_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{query_id} = new Impala::Protocol::Beeswax::QueryHandle();
        $xfer += $self->{query_id}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_GetRuntimeProfile_args');
  if (defined $self->{query_id}) {
    $xfer += $output->writeFieldBegin('query_id', TType::STRUCT, 1);
    $xfer += $self->{query_id}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_GetRuntimeProfile_result;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_GetRuntimeProfile_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_GetRuntimeProfile_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::BeeswaxException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_GetRuntimeProfile_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_CloseInsert_args;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_CloseInsert_args->mk_accessors( qw( handle ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{handle} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{handle}) {
      $self->{handle} = $vals->{handle};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_CloseInsert_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{handle} = new Impala::Protocol::Beeswax::QueryHandle();
        $xfer += $self->{handle}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_CloseInsert_args');
  if (defined $self->{handle}) {
    $xfer += $output->writeFieldBegin('handle', TType::STRUCT, 1);
    $xfer += $self->{handle}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_CloseInsert_result;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_CloseInsert_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  $self->{error2} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{error2}) {
      $self->{error2} = $vals->{error2};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_CloseInsert_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Impala::TInsertResult();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new Impala::Protocol::Beeswax::QueryNotFoundException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error2} = new Impala::Protocol::Beeswax::BeeswaxException();
        $xfer += $self->{error2}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_CloseInsert_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error2}) {
    $xfer += $output->writeFieldBegin('error2', TType::STRUCT, 2);
    $xfer += $self->{error2}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_PingImpalaService_args;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_PingImpalaService_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_PingImpalaService_args');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaService_PingImpalaService_result;
use base qw(Class::Accessor);
Impala::Protocol::Impala::ImpalaService_PingImpalaService_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'ImpalaService_PingImpalaService_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new Impala::Protocol::Impala::TPingImpalaServiceResp();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ImpalaService_PingImpalaService_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package
	Impala::Protocol::Impala::ImpalaServiceIf;

use strict;
use base qw(Impala::Protocol::Beeswax::BeeswaxServiceIf);

sub Cancel{
  my $self = shift;
  my $query_id = shift;

  die 'implement interface';
}

sub ResetCatalog{
  my $self = shift;

  die 'implement interface';
}

sub ResetTable{
  my $self = shift;
  my $request = shift;

  die 'implement interface';
}

sub GetRuntimeProfile{
  my $self = shift;
  my $query_id = shift;

  die 'implement interface';
}

sub CloseInsert{
  my $self = shift;
  my $handle = shift;

  die 'implement interface';
}

sub PingImpalaService{
  my $self = shift;

  die 'implement interface';
}

package
	Impala::Protocol::Impala::ImpalaServiceRest;

use strict;
use base qw(Impala::Protocol::Beeswax::BeeswaxServiceRest);

sub Cancel{
  my ($self, $request) = @_;

  my $query_id = ($request->{'query_id'}) ? $request->{'query_id'} : undef;
  return $self->{impl}->Cancel($query_id);
}

sub ResetCatalog{
  my ($self, $request) = @_;

  return $self->{impl}->ResetCatalog();
}

sub ResetTable{
  my ($self, $request) = @_;

  my $_request = ($request->{'request'}) ? $request->{'request'} : undef;
  return $self->{impl}->ResetTable($_request);
}

sub GetRuntimeProfile{
  my ($self, $request) = @_;

  my $query_id = ($request->{'query_id'}) ? $request->{'query_id'} : undef;
  return $self->{impl}->GetRuntimeProfile($query_id);
}

sub CloseInsert{
  my ($self, $request) = @_;

  my $handle = ($request->{'handle'}) ? $request->{'handle'} : undef;
  return $self->{impl}->CloseInsert($handle);
}

sub PingImpalaService{
  my ($self, $request) = @_;

  return $self->{impl}->PingImpalaService();
}

package
	Impala::Protocol::Impala::ImpalaServiceClient;

use base qw(Impala::Protocol::Beeswax::BeeswaxServiceClient);
use base qw(Impala::Protocol::Impala::ImpalaServiceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self = $classname->SUPER::new($input, $output);
  return bless($self,$classname);
}

sub Cancel{
  my $self = shift;
  my $query_id = shift;

    $self->send_Cancel($query_id);
  return $self->recv_Cancel();
}

sub send_Cancel{
  my $self = shift;
  my $query_id = shift;

  $self->{output}->writeMessageBegin('Cancel', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Impala::ImpalaService_Cancel_args();
  $args->{query_id} = $query_id;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_Cancel{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Impala::ImpalaService_Cancel_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "Cancel failed: unknown result";
}
sub ResetCatalog{
  my $self = shift;

    $self->send_ResetCatalog();
  return $self->recv_ResetCatalog();
}

sub send_ResetCatalog{
  my $self = shift;

  $self->{output}->writeMessageBegin('ResetCatalog', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Impala::ImpalaService_ResetCatalog_args();
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_ResetCatalog{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Impala::ImpalaService_ResetCatalog_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "ResetCatalog failed: unknown result";
}
sub ResetTable{
  my $self = shift;
  my $request = shift;

    $self->send_ResetTable($request);
  return $self->recv_ResetTable();
}

sub send_ResetTable{
  my $self = shift;
  my $request = shift;

  $self->{output}->writeMessageBegin('ResetTable', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Impala::ImpalaService_ResetTable_args();
  $args->{request} = $request;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_ResetTable{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Impala::ImpalaService_ResetTable_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "ResetTable failed: unknown result";
}
sub GetRuntimeProfile{
  my $self = shift;
  my $query_id = shift;

    $self->send_GetRuntimeProfile($query_id);
  return $self->recv_GetRuntimeProfile();
}

sub send_GetRuntimeProfile{
  my $self = shift;
  my $query_id = shift;

  $self->{output}->writeMessageBegin('GetRuntimeProfile', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Impala::ImpalaService_GetRuntimeProfile_args();
  $args->{query_id} = $query_id;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_GetRuntimeProfile{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Impala::ImpalaService_GetRuntimeProfile_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "GetRuntimeProfile failed: unknown result";
}
sub CloseInsert{
  my $self = shift;
  my $handle = shift;

    $self->send_CloseInsert($handle);
  return $self->recv_CloseInsert();
}

sub send_CloseInsert{
  my $self = shift;
  my $handle = shift;

  $self->{output}->writeMessageBegin('CloseInsert', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Impala::ImpalaService_CloseInsert_args();
  $args->{handle} = $handle;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_CloseInsert{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Impala::ImpalaService_CloseInsert_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  if (defined $result->{error2}) {
    die $result->{error2};
  }
  die "CloseInsert failed: unknown result";
}
sub PingImpalaService{
  my $self = shift;

    $self->send_PingImpalaService();
  return $self->recv_PingImpalaService();
}

sub send_PingImpalaService{
  my $self = shift;

  $self->{output}->writeMessageBegin('PingImpalaService', TMessageType::CALL, $self->{seqid});
  my $args = new Impala::Protocol::Impala::ImpalaService_PingImpalaService_args();
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_PingImpalaService{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Impala::Protocol::Impala::ImpalaService_PingImpalaService_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "PingImpalaService failed: unknown result";
}
package
	Impala::Protocol::Impala::ImpalaServiceProcessor;

use strict;
use base qw(Impala::Protocol::Beeswax::BeeswaxServiceProcessor);

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_Cancel {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Impala::ImpalaService_Cancel_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Impala::ImpalaService_Cancel_result();
    eval {
      $result->{success} = $self->{handler}->Cancel($args->query_id);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::BeeswaxException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('Cancel', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_ResetCatalog {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Impala::ImpalaService_ResetCatalog_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Impala::ImpalaService_ResetCatalog_result();
    $result->{success} = $self->{handler}->ResetCatalog();
    $output->writeMessageBegin('ResetCatalog', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_ResetTable {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Impala::ImpalaService_ResetTable_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Impala::ImpalaService_ResetTable_result();
    $result->{success} = $self->{handler}->ResetTable($args->request);
    $output->writeMessageBegin('ResetTable', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_GetRuntimeProfile {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Impala::ImpalaService_GetRuntimeProfile_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Impala::ImpalaService_GetRuntimeProfile_result();
    eval {
      $result->{success} = $self->{handler}->GetRuntimeProfile($args->query_id);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::BeeswaxException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('GetRuntimeProfile', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_CloseInsert {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Impala::ImpalaService_CloseInsert_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Impala::ImpalaService_CloseInsert_result();
    eval {
      $result->{success} = $self->{handler}->CloseInsert($args->handle);
    }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::QueryNotFoundException') ){ 
      $result->{error} = $@;
        }; if( UNIVERSAL::isa($@,'Impala::Protocol::Beeswax::BeeswaxException') ){ 
      $result->{error2} = $@;
    }
    $output->writeMessageBegin('CloseInsert', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_PingImpalaService {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new Impala::Protocol::Impala::ImpalaService_PingImpalaService_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Impala::Protocol::Impala::ImpalaService_PingImpalaService_result();
    $result->{success} = $self->{handler}->PingImpalaService();
    $output->writeMessageBegin('PingImpalaService', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
